type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MUL4
  | DIV2
  | DIV10
  | FZERO
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | LESS_DOT
  | GREATER_DOT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 47 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MUL4 *);
  264 (* DIV2 *);
  265 (* DIV10 *);
  266 (* FZERO *);
  267 (* MINUS_DOT *);
  268 (* PLUS_DOT *);
  269 (* AST_DOT *);
  270 (* SLASH_DOT *);
  271 (* EQUAL *);
  272 (* LESS_GREATER *);
  273 (* LESS_EQUAL *);
  274 (* GREATER_EQUAL *);
  275 (* LESS *);
  276 (* GREATER *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  281 (* LET *);
  282 (* IN *);
  283 (* REC *);
  284 (* COMMA *);
  285 (* ARRAY_CREATE *);
  286 (* DOT *);
  287 (* LESS_MINUS *);
  288 (* SEMICOLON *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0 (* EOF *);
  291 (* LESS_DOT *);
  292 (* GREATER_DOT *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  280 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\007\000\007\000\004\000\004\000\005\000\005\000\006\000\006\000\
\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\002\000\003\000\003\000\003\000\003\000\006\000\005\000\002\000\
\002\000\001\000\008\000\007\000\003\000\003\000\001\000\004\000\
\002\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\039\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\013\000\
\014\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\048\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\016\000\017\000\056\000\051\000\018\000\058\000\084\000"

let yysindex = "\255\255\
\058\255\000\000\000\000\000\000\000\000\000\000\058\255\058\255\
\058\255\058\255\058\255\000\000\238\254\074\255\111\255\057\003\
\002\255\235\254\164\255\164\255\057\003\164\255\142\255\005\255\
\249\254\253\254\069\255\000\000\175\255\058\255\058\255\000\000\
\000\000\000\000\058\255\058\255\058\255\058\255\058\255\058\255\
\058\255\058\255\058\255\058\255\058\255\058\255\058\255\058\255\
\245\254\250\254\074\255\058\255\058\255\058\255\255\254\001\255\
\000\255\230\254\248\254\250\254\000\000\137\003\137\003\137\003\
\137\003\164\255\164\255\107\003\107\003\107\003\107\003\107\003\
\107\003\121\003\057\003\057\003\057\003\058\255\250\254\121\003\
\207\255\185\002\255\254\015\255\058\255\007\255\012\255\037\255\
\058\255\217\002\058\255\058\255\000\000\058\255\057\003\000\000\
\000\000\058\255\249\002\023\255\089\003\057\003\057\003\025\003\
\000\000\058\255\058\255\089\003\057\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\105\000\201\000\233\000\001\001\206\000\026\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\137\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\000\000\000\115\001\147\001\179\001\
\211\001\058\001\083\001\231\001\254\001\022\002\047\002\067\002\
\087\002\104\002\134\001\166\001\198\001\000\000\073\000\118\002\
\000\000\000\000\050\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\144\002\000\000\
\000\000\000\000\000\000\001\000\125\002\146\002\040\255\000\000\
\000\000\000\000\000\000\139\002\161\002"

let yygindex = "\000\000\
\003\000\002\000\000\000\000\000\000\000\000\000\240\255"

let yytablesize = 1197
let yytable = "\001\000\
\007\000\087\000\004\000\005\000\006\000\024\000\052\000\088\000\
\025\000\019\000\020\000\021\000\022\000\023\000\026\000\027\000\
\055\000\029\000\050\000\054\000\057\000\078\000\083\000\059\000\
\089\000\012\000\085\000\086\000\060\000\094\000\096\000\049\000\
\062\000\063\000\015\000\097\000\044\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\098\000\079\000\106\000\080\000\081\000\
\082\000\003\000\004\000\005\000\006\000\007\000\008\000\049\000\
\042\000\040\000\093\000\009\000\010\000\004\000\005\000\006\000\
\043\000\000\000\004\000\005\000\006\000\000\000\011\000\000\000\
\090\000\012\000\013\000\000\000\000\000\000\000\014\000\095\000\
\000\000\000\000\015\000\099\000\012\000\101\000\102\000\000\000\
\103\000\012\000\059\000\000\000\104\000\015\000\000\000\000\000\
\008\000\000\000\015\000\000\000\108\000\109\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\000\000\000\000\000\000\
\009\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\012\000\013\000\
\033\000\000\000\000\000\014\000\000\000\000\000\000\000\015\000\
\028\000\000\000\030\000\031\000\032\000\033\000\034\000\000\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\000\000\053\000\000\000\000\000\000\000\000\000\
\038\000\045\000\032\000\033\000\034\000\046\000\000\000\000\000\
\047\000\048\000\000\000\030\000\031\000\032\000\033\000\034\000\
\000\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\000\000\047\000\048\000\
\034\000\000\000\045\000\000\000\000\000\032\000\046\000\000\000\
\061\000\047\000\048\000\030\000\031\000\032\000\033\000\034\000\
\000\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\091\000\000\000\000\000\
\009\000\000\000\045\000\000\000\000\000\000\000\046\000\000\000\
\000\000\047\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\007\000\
\007\000\025\000\007\000\000\000\007\000\000\000\007\000\000\000\
\007\000\007\000\007\000\007\000\007\000\044\000\044\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\028\000\044\000\044\000\044\000\000\000\044\000\000\000\
\044\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\043\000\043\000\043\000\000\000\043\000\043\000\043\000\
\043\000\043\000\029\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\000\000\043\000\000\000\043\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\008\000\008\000\008\000\
\008\000\008\000\012\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\008\000\
\000\000\000\000\008\000\000\000\008\000\037\000\000\000\000\000\
\008\000\000\000\008\000\008\000\008\000\033\000\033\000\033\000\
\033\000\033\000\011\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\000\000\033\000\033\000\
\000\000\000\000\033\000\000\000\033\000\020\000\000\000\000\000\
\033\000\000\000\033\000\033\000\033\000\038\000\038\000\038\000\
\038\000\038\000\027\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\000\000\000\000\038\000\000\000\038\000\021\000\000\000\000\000\
\038\000\000\000\038\000\038\000\038\000\034\000\034\000\034\000\
\034\000\034\000\026\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\000\000\000\000\034\000\032\000\032\000\000\000\016\000\032\000\
\034\000\000\000\034\000\034\000\034\000\009\000\009\000\032\000\
\000\000\000\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\017\000\009\000\009\000\
\000\000\000\000\009\000\000\000\009\000\010\000\010\000\000\000\
\009\000\000\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\022\000\010\000\010\000\
\000\000\000\000\010\000\000\000\010\000\000\000\025\000\025\000\
\010\000\000\000\010\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\023\000\025\000\
\025\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\
\000\000\025\000\000\000\025\000\000\000\000\000\028\000\028\000\
\000\000\000\000\018\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\000\000\000\000\028\000\000\000\028\000\019\000\029\000\
\029\000\028\000\000\000\028\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\046\000\
\029\000\029\000\000\000\000\000\029\000\000\000\029\000\000\000\
\000\000\000\000\029\000\000\000\029\000\045\000\000\000\012\000\
\012\000\000\000\000\000\000\000\024\000\012\000\012\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\012\000\036\000\000\000\012\000\000\000\012\000\031\000\
\000\000\030\000\012\000\000\000\012\000\000\000\000\000\011\000\
\011\000\000\000\000\000\037\000\037\000\011\000\011\000\037\000\
\035\000\011\000\011\000\011\000\011\000\011\000\011\000\037\000\
\011\000\011\000\000\000\000\000\011\000\000\000\011\000\000\000\
\000\000\000\000\011\000\000\000\011\000\000\000\000\000\027\000\
\027\000\000\000\000\000\020\000\020\000\027\000\027\000\020\000\
\000\000\027\000\027\000\027\000\027\000\027\000\027\000\020\000\
\027\000\027\000\000\000\000\000\027\000\000\000\027\000\000\000\
\000\000\000\000\027\000\000\000\027\000\000\000\000\000\026\000\
\026\000\000\000\000\000\021\000\021\000\026\000\026\000\021\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\021\000\
\026\000\026\000\000\000\000\000\026\000\000\000\026\000\000\000\
\000\000\000\000\026\000\000\000\026\000\016\000\016\000\016\000\
\016\000\016\000\016\000\000\000\016\000\016\000\000\000\000\000\
\016\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\
\016\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\017\000\000\000\000\000\017\000\
\000\000\017\000\000\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\000\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\022\000\022\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\000\000\000\000\
\023\000\000\000\023\000\000\000\000\000\000\000\023\000\000\000\
\023\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\018\000\000\000\018\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\019\000\000\000\000\000\000\000\019\000\000\000\
\019\000\000\000\000\000\000\000\000\000\046\000\046\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\000\000\046\000\
\000\000\046\000\000\000\045\000\045\000\000\000\000\000\045\000\
\000\000\045\000\024\000\024\000\000\000\045\000\024\000\045\000\
\000\000\000\000\000\000\000\000\024\000\000\000\024\000\000\000\
\036\000\036\000\000\000\000\000\036\000\031\000\031\000\030\000\
\030\000\031\000\036\000\030\000\036\000\000\000\000\000\000\000\
\000\000\031\000\000\000\030\000\000\000\000\000\035\000\035\000\
\000\000\000\000\035\000\000\000\000\000\030\000\031\000\032\000\
\033\000\034\000\035\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\092\000\000\000\045\000\000\000\000\000\000\000\
\046\000\000\000\000\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\000\000\100\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\000\000\105\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\045\000\000\000\000\000\000\000\
\046\000\000\000\000\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\000\000\000\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\030\000\
\031\000\032\000\033\000\034\000\045\000\035\000\036\000\037\000\
\038\000\000\000\000\000\047\000\048\000\030\000\031\000\032\000\
\033\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\047\000\048\000\032\000\
\033\000\034\000\000\000\000\000\000\000\037\000\038\000\000\000\
\000\000\000\000\000\000\047\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\048\000"

let yycheck = "\001\000\
\000\000\028\001\001\001\002\001\003\001\024\001\028\001\034\001\
\027\001\007\000\008\000\009\000\010\000\011\000\033\001\014\000\
\024\001\015\000\017\000\015\001\024\001\033\001\024\001\030\001\
\033\001\024\001\026\001\028\001\027\000\015\001\024\001\030\001\
\030\000\031\000\033\001\024\001\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\015\001\051\000\031\001\052\000\053\000\
\054\000\000\001\001\001\002\001\003\001\004\001\005\001\000\000\
\015\001\026\001\083\000\010\001\011\001\001\001\002\001\003\001\
\000\000\255\255\001\001\002\001\003\001\255\255\021\001\255\255\
\078\000\024\001\025\001\255\255\255\255\255\255\029\001\085\000\
\255\255\255\255\033\001\089\000\024\001\091\000\092\000\255\255\
\094\000\024\001\030\001\255\255\098\000\033\001\255\255\255\255\
\000\000\255\255\033\001\255\255\106\000\107\000\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\024\001\025\001\
\000\000\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\034\001\255\255\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\000\000\028\001\007\001\008\001\009\001\032\001\255\255\255\255\
\035\001\036\001\255\255\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\035\001\036\001\
\000\000\255\255\028\001\255\255\255\255\000\000\032\001\255\255\
\034\001\035\001\036\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\255\255\255\255\
\000\000\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\255\255\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\000\000\026\001\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\023\001\024\001\255\255\026\001\255\255\
\028\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\000\000\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\000\000\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\000\000\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\026\001\022\001\023\001\255\255\000\000\026\001\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\034\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\005\001\006\001\255\255\
\032\001\255\255\034\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\255\255\005\001\006\001\
\032\001\255\255\034\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\032\001\255\255\034\001\255\255\255\255\005\001\006\001\
\255\255\255\255\000\000\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\000\000\005\001\
\006\001\032\001\255\255\034\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\000\000\255\255\005\001\
\006\001\255\255\255\255\255\255\000\000\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\000\000\255\255\026\001\255\255\028\001\000\000\
\255\255\000\000\032\001\255\255\034\001\255\255\255\255\005\001\
\006\001\255\255\255\255\022\001\023\001\011\001\012\001\026\001\
\000\000\015\001\016\001\017\001\018\001\019\001\020\001\034\001\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\005\001\
\006\001\255\255\255\255\022\001\023\001\011\001\012\001\026\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\034\001\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\005\001\
\006\001\255\255\255\255\022\001\023\001\011\001\012\001\026\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\034\001\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\022\001\023\001\255\255\032\001\026\001\034\001\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\255\255\
\022\001\023\001\255\255\255\255\026\001\022\001\023\001\022\001\
\023\001\026\001\032\001\026\001\034\001\255\255\255\255\255\255\
\255\255\034\001\255\255\034\001\255\255\255\255\022\001\023\001\
\255\255\255\255\026\001\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\034\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\255\255\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\255\255\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\255\255\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\028\001\011\001\012\001\013\001\
\014\001\255\255\255\255\035\001\036\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\035\001\036\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL4\000\
  DIV2\000\
  DIV10\000\
  FZERO\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  LESS_DOT\000\
  GREATER_DOT\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
    ( _2 )
# 518 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
    ( Unit )
# 524 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 74 "parser.mly"
    ( Bool(_1) )
# 531 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
    ( Int(_1) )
# 538 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 78 "parser.mly"
    ( Float(_1) )
# 545 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 80 "parser.mly"
    ( Var(_1) )
# 552 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
    ( Get(_1, _4) )
# 560 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 86 "parser.mly"
    ( _1 )
# 567 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 89 "parser.mly"
    ( Not(_2) )
# 574 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 583 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Add(_1, _3) )
# 591 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
    ( Sub(_1, _3) )
# 599 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Mul4 _1 )
# 606 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Div2 _1 )
# 613 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( Div10 _1 )
# 620 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( Eq(_1, _3) )
# 628 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 636 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Not(LE(_3, _1)) )
# 644 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Not(LE(_1, _3)) )
# 652 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( FLt(_1, _3) )
# 660 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( Not(FLt(_1, _3)) )
# 668 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( LE(_1, _3) )
# 676 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( LE(_3, _1) )
# 684 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( If(_2, _4, _6) )
# 693 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( FNeg(_2) )
# 700 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( FAdd(_1, _3) )
# 708 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( FSub(_1, _3) )
# 716 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( FMul(_1, _3) )
# 724 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( FDiv(_1, _3) )
# 732 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 741 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( LetRec(_3, _5) )
# 749 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( FZero(_2) )
# 756 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 145 "parser.mly"
    ( App(_1, _2) )
# 764 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 148 "parser.mly"
    ( Tuple(_1) )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 780 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( Put(_1, _4, _7) )
# 789 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 797 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 157 "parser.mly"
    ( Array(_2, _3) )
# 805 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
    ( failwith       (******* エラー出力 *******)
        (Printf.sprintf "%s line %d:%d-%d \x1b[31mParse Error:\x1b[0m"
           (Parsing.symbol_start_pos ()).pos_fname
           (Parsing.symbol_start_pos ()).pos_lnum
           ((Parsing.symbol_start_pos ()).pos_cnum -
           (Parsing.symbol_start_pos ()).pos_bol)
           ((Parsing.symbol_end_pos ()).pos_cnum -
           (Parsing.symbol_end_pos ()).pos_bol)
           (*   (Lexing.lexeme_end lexbuf)*)
        )
    )
# 821 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 830 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 177 "parser.mly"
    ( addtyp _1 :: _2 )
# 838 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 179 "parser.mly"
    ( [addtyp _1] )
# 845 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
    ( _1 @ [_2] )
# 853 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 187 "parser.mly"
    ( [_1] )
# 860 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
    ( _1 @ [_3] )
# 868 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 193 "parser.mly"
    ( [_1; _3] )
# 876 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 197 "parser.mly"
    ( _1 @ [addtyp _3] )
# 884 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 199 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 892 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
