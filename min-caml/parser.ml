type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MUL4
  | DIV2
  | DIV10
  | FLOAT_TO_INT
  | INT_TO_FLOAT
  | PLUS_DOT
  | MINUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | LESS_DOT
  | GREATER_DOT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 48 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MUL4 *);
  264 (* DIV2 *);
  265 (* DIV10 *);
  266 (* FLOAT_TO_INT *);
  267 (* INT_TO_FLOAT *);
  268 (* PLUS_DOT *);
  269 (* MINUS_DOT *);
  270 (* AST_DOT *);
  271 (* SLASH_DOT *);
  272 (* EQUAL *);
  273 (* LESS_GREATER *);
  274 (* LESS_EQUAL *);
  275 (* GREATER_EQUAL *);
  276 (* LESS *);
  277 (* GREATER *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  282 (* LET *);
  283 (* IN *);
  284 (* REC *);
  285 (* COMMA *);
  286 (* ARRAY_CREATE *);
  287 (* DOT *);
  288 (* LESS_MINUS *);
  289 (* SEMICOLON *);
  290 (* LPAREN *);
  291 (* RPAREN *);
    0 (* EOF *);
  292 (* LESS_DOT *);
  293 (* GREATER_DOT *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  281 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\007\000\007\000\004\000\004\000\005\000\005\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\002\000\003\000\003\000\003\000\003\000\006\000\005\000\002\000\
\002\000\002\000\001\000\008\000\007\000\003\000\003\000\001\000\
\004\000\002\000\001\000\002\000\001\000\003\000\003\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\040\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\013\000\014\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\049\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\018\000\058\000\053\000\019\000\060\000\086\000"

let yysindex = "\255\255\
\150\255\000\000\000\000\000\000\000\000\000\000\150\255\150\255\
\150\255\150\255\150\255\150\255\000\000\248\254\003\255\112\255\
\160\003\028\255\230\254\083\255\083\255\160\003\160\003\083\255\
\180\255\247\254\246\254\250\254\063\255\000\000\218\002\150\255\
\150\255\000\000\000\000\000\000\150\255\150\255\150\255\150\255\
\150\255\150\255\150\255\150\255\150\255\150\255\150\255\150\255\
\150\255\150\255\238\254\249\254\003\255\150\255\150\255\150\255\
\252\254\000\255\004\255\229\254\245\254\249\254\000\000\121\255\
\121\255\121\255\121\255\083\255\083\255\064\255\064\255\064\255\
\064\255\064\255\064\255\219\003\160\003\160\003\160\003\150\255\
\249\254\219\003\251\002\028\003\252\254\016\255\150\255\029\255\
\030\255\045\255\150\255\061\003\150\255\150\255\000\000\150\255\
\160\003\000\000\000\000\150\255\094\003\031\255\193\003\160\003\
\160\003\127\003\000\000\150\255\150\255\193\003\160\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\108\000\207\000\233\000\011\001\137\002\142\002\042\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\141\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\000\000\133\001\
\166\001\199\001\232\001\068\001\101\001\255\001\019\002\039\002\
\064\002\090\002\110\002\140\001\144\002\158\002\165\002\000\000\
\075\000\173\001\000\000\000\000\052\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\174\002\000\000\000\000\000\000\000\000\001\000\206\001\180\002\
\047\255\000\000\000\000\000\000\000\000\123\002\194\002"

let yygindex = "\000\000\
\002\000\007\000\000\000\000\000\000\000\000\000\251\255"

let yytablesize = 1280
let yytable = "\001\000\
\007\000\089\000\054\000\004\000\005\000\006\000\056\000\090\000\
\020\000\021\000\022\000\023\000\024\000\025\000\057\000\080\000\
\026\000\031\000\059\000\027\000\085\000\029\000\091\000\061\000\
\052\000\028\000\087\000\013\000\004\000\005\000\006\000\096\000\
\088\000\064\000\065\000\062\000\016\000\045\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\013\000\098\000\099\000\082\000\
\083\000\084\000\051\000\081\000\100\000\016\000\108\000\004\000\
\005\000\006\000\050\000\043\000\032\000\033\000\034\000\035\000\
\036\000\041\000\044\000\037\000\038\000\039\000\040\000\095\000\
\000\000\092\000\000\000\000\000\000\000\000\000\000\000\013\000\
\097\000\034\000\035\000\036\000\101\000\061\000\103\000\104\000\
\016\000\105\000\000\000\049\000\050\000\106\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\110\000\111\000\003\000\
\004\000\005\000\006\000\007\000\008\000\000\000\049\000\050\000\
\000\000\009\000\010\000\000\000\011\000\000\000\000\000\034\000\
\035\000\036\000\000\000\000\000\000\000\012\000\039\000\040\000\
\013\000\014\000\000\000\000\000\034\000\015\000\000\000\000\000\
\000\000\016\000\030\000\000\000\000\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\049\000\050\000\000\000\009\000\
\010\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\039\000\013\000\014\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\016\000\
\032\000\033\000\034\000\035\000\036\000\000\000\000\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\055\000\000\000\000\000\000\000\035\000\000\000\
\047\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\010\000\000\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\000\000\007\000\
\007\000\007\000\000\000\007\000\000\000\007\000\000\000\007\000\
\000\000\007\000\007\000\007\000\007\000\007\000\045\000\045\000\
\045\000\025\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\045\000\045\000\045\000\000\000\
\045\000\000\000\045\000\028\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\044\000\044\000\044\000\000\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\044\000\044\000\044\000\029\000\044\000\000\000\044\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\000\000\008\000\008\000\012\000\000\000\008\000\000\000\
\008\000\000\000\000\000\047\000\008\000\000\000\008\000\008\000\
\008\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\034\000\011\000\000\000\034\000\
\000\000\034\000\000\000\000\000\046\000\034\000\000\000\034\000\
\034\000\034\000\039\000\039\000\039\000\039\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\039\000\039\000\026\000\000\000\
\039\000\000\000\039\000\000\000\000\000\024\000\039\000\000\000\
\039\000\039\000\039\000\035\000\035\000\035\000\035\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\035\000\035\000\027\000\
\000\000\035\000\000\000\000\000\000\000\009\000\009\000\035\000\
\000\000\035\000\035\000\035\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\016\000\009\000\
\009\000\000\000\000\000\009\000\000\000\009\000\000\000\000\000\
\000\000\009\000\000\000\009\000\000\000\000\000\000\000\010\000\
\010\000\000\000\017\000\000\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\000\000\000\000\010\000\022\000\010\000\
\000\000\000\000\000\000\010\000\000\000\010\000\025\000\025\000\
\000\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\023\000\
\025\000\025\000\000\000\000\000\025\000\000\000\025\000\000\000\
\028\000\028\000\025\000\000\000\025\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\018\000\028\000\028\000\000\000\000\000\028\000\000\000\
\028\000\000\000\000\000\000\000\028\000\000\000\028\000\000\000\
\000\000\029\000\029\000\000\000\000\000\019\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\037\000\029\000\029\000\000\000\000\000\029\000\
\000\000\029\000\000\000\000\000\000\000\029\000\000\000\029\000\
\032\000\012\000\012\000\000\000\000\000\033\000\000\000\038\000\
\012\000\012\000\000\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\012\000\012\000\020\000\000\000\012\000\
\000\000\012\000\047\000\047\000\021\000\012\000\047\000\012\000\
\047\000\000\000\011\000\011\000\047\000\031\000\047\000\000\000\
\000\000\011\000\011\000\030\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\000\000\000\000\
\011\000\036\000\011\000\046\000\046\000\000\000\011\000\046\000\
\011\000\046\000\000\000\026\000\026\000\046\000\000\000\046\000\
\000\000\000\000\026\000\026\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\026\000\026\000\000\000\
\000\000\026\000\000\000\026\000\024\000\024\000\000\000\026\000\
\024\000\026\000\000\000\000\000\027\000\027\000\024\000\000\000\
\024\000\000\000\000\000\027\000\027\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\027\000\027\000\
\000\000\000\000\027\000\000\000\027\000\000\000\000\000\000\000\
\027\000\000\000\027\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\000\000\016\000\016\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\000\000\016\000\
\000\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\000\000\023\000\000\000\023\000\000\000\000\000\000\000\
\023\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\018\000\000\000\018\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\019\000\000\000\000\000\000\000\019\000\000\000\
\019\000\037\000\037\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\032\000\
\032\000\000\000\000\000\032\000\033\000\033\000\038\000\038\000\
\033\000\000\000\038\000\032\000\000\000\000\000\000\000\000\000\
\033\000\000\000\038\000\000\000\020\000\020\000\000\000\000\000\
\020\000\000\000\000\000\021\000\021\000\000\000\000\000\021\000\
\020\000\000\000\000\000\000\000\031\000\031\000\000\000\021\000\
\031\000\000\000\030\000\030\000\000\000\000\000\030\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\036\000\036\000\000\000\000\000\036\000\000\000\032\000\033\000\
\034\000\035\000\036\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\048\000\000\000\063\000\049\000\050\000\032\000\
\033\000\034\000\035\000\036\000\000\000\000\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\000\000\000\000\093\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\048\000\000\000\000\000\049\000\050\000\
\032\000\033\000\034\000\035\000\036\000\000\000\000\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\000\000\000\000\000\000\000\000\094\000\000\000\
\047\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\
\050\000\032\000\033\000\034\000\035\000\036\000\000\000\000\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\048\000\000\000\102\000\
\049\000\050\000\032\000\033\000\034\000\035\000\036\000\000\000\
\000\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\048\000\000\000\
\107\000\049\000\050\000\032\000\033\000\034\000\035\000\036\000\
\000\000\000\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\000\000\000\000\000\000\000\000\
\000\000\109\000\000\000\047\000\000\000\000\000\000\000\048\000\
\000\000\000\000\049\000\050\000\032\000\033\000\034\000\035\000\
\036\000\000\000\000\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\048\000\000\000\000\000\049\000\050\000\032\000\033\000\034\000\
\035\000\036\000\000\000\000\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\032\000\
\033\000\034\000\035\000\036\000\049\000\050\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000"

let yycheck = "\001\000\
\000\000\029\001\029\001\001\001\002\001\003\001\016\001\035\001\
\007\000\008\000\009\000\010\000\011\000\012\000\025\001\034\001\
\025\001\016\000\025\001\028\001\025\001\015\000\034\001\031\001\
\018\000\034\001\027\001\025\001\001\001\002\001\003\001\016\001\
\029\001\032\000\033\000\029\000\034\001\000\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\025\001\025\001\025\001\054\000\
\055\000\056\000\031\001\053\000\016\001\034\001\032\001\001\001\
\002\001\003\001\000\000\016\001\005\001\006\001\007\001\008\001\
\009\001\027\001\000\000\012\001\013\001\014\001\015\001\085\000\
\255\255\080\000\255\255\255\255\255\255\255\255\255\255\025\001\
\087\000\007\001\008\001\009\001\091\000\031\001\093\000\094\000\
\034\001\096\000\255\255\036\001\037\001\100\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\108\000\109\000\000\001\
\001\001\002\001\003\001\004\001\005\001\255\255\036\001\037\001\
\255\255\010\001\011\001\255\255\013\001\255\255\255\255\007\001\
\008\001\009\001\255\255\255\255\255\255\022\001\014\001\015\001\
\025\001\026\001\255\255\255\255\000\000\030\001\255\255\255\255\
\255\255\034\001\035\001\255\255\255\255\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\036\001\037\001\255\255\010\001\
\011\001\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\000\000\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\255\255\255\255\034\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\255\255\255\255\000\000\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\000\000\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\001\001\002\001\
\003\001\000\000\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\029\001\000\000\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\000\000\027\001\255\255\029\001\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\024\001\000\000\255\255\027\001\255\255\
\029\001\255\255\255\255\000\000\033\001\255\255\035\001\036\001\
\037\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\000\000\255\255\027\001\
\255\255\029\001\255\255\255\255\000\000\033\001\255\255\035\001\
\036\001\037\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\000\000\255\255\
\027\001\255\255\029\001\255\255\255\255\000\000\033\001\255\255\
\035\001\036\001\037\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\000\000\
\255\255\027\001\255\255\255\255\255\255\005\001\006\001\033\001\
\255\255\035\001\036\001\037\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\005\001\
\006\001\255\255\000\000\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\255\255\255\255\027\001\000\000\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\000\000\
\023\001\024\001\255\255\255\255\027\001\255\255\029\001\255\255\
\005\001\006\001\033\001\255\255\035\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\000\000\023\001\024\001\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\255\255\
\255\255\005\001\006\001\255\255\255\255\000\000\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\000\000\023\001\024\001\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\000\000\005\001\006\001\255\255\255\255\000\000\255\255\000\000\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\000\000\255\255\027\001\
\255\255\029\001\023\001\024\001\000\000\033\001\027\001\035\001\
\029\001\255\255\005\001\006\001\033\001\000\000\035\001\255\255\
\255\255\012\001\013\001\000\000\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\255\255\255\255\
\027\001\000\000\029\001\023\001\024\001\255\255\033\001\027\001\
\035\001\029\001\255\255\005\001\006\001\033\001\255\255\035\001\
\255\255\255\255\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\255\255\027\001\255\255\029\001\023\001\024\001\255\255\033\001\
\027\001\035\001\255\255\255\255\005\001\006\001\033\001\255\255\
\035\001\255\255\255\255\012\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\023\001\024\001\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\023\001\024\001\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\023\001\024\001\255\255\255\255\027\001\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\023\001\024\001\255\255\255\255\
\027\001\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\023\001\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\255\255\023\001\
\024\001\255\255\255\255\027\001\023\001\024\001\023\001\024\001\
\027\001\255\255\027\001\035\001\255\255\255\255\255\255\255\255\
\035\001\255\255\035\001\255\255\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\035\001\255\255\255\255\255\255\023\001\024\001\255\255\035\001\
\027\001\255\255\023\001\024\001\255\255\255\255\027\001\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\023\001\024\001\255\255\255\255\027\001\255\255\005\001\006\001\
\007\001\008\001\009\001\255\255\035\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\037\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\036\001\037\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\036\001\037\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\005\001\
\006\001\007\001\008\001\009\001\036\001\037\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL4\000\
  DIV2\000\
  DIV10\000\
  FLOAT_TO_INT\000\
  INT_TO_FLOAT\000\
  PLUS_DOT\000\
  MINUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  LESS_DOT\000\
  GREATER_DOT\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
    ( _2 )
# 541 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
    ( Unit )
# 547 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 74 "parser.mly"
    ( Bool(_1) )
# 554 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
    ( Int(_1) )
# 561 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 78 "parser.mly"
    ( Float(_1) )
# 568 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 80 "parser.mly"
    ( Var(_1) )
# 575 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
    ( Get(_1, _4) )
# 583 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 86 "parser.mly"
    ( _1 )
# 590 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 89 "parser.mly"
    ( Not(_2) )
# 597 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 606 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Add(_1, _3) )
# 614 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
    ( Sub(_1, _3) )
# 622 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Mul4 _1 )
# 629 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Div2 _1 )
# 636 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( Div10 _1 )
# 643 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( Eq(_1, _3) )
# 651 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 659 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Not(LE(_3, _1)) )
# 667 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Not(LE(_1, _3)) )
# 675 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( FLt(_1, _3) )
# 683 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( Not(FLt(_1, _3)) )
# 691 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( LE(_1, _3) )
# 699 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( LE(_3, _1) )
# 707 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( If(_2, _4, _6) )
# 716 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( FNeg(_2) )
# 723 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( FAdd(_1, _3) )
# 731 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( FSub(_1, _3) )
# 739 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( FMul(_1, _3) )
# 747 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( FDiv(_1, _3) )
# 755 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 764 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( LetRec(_3, _5) )
# 772 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( FtoI(_2) )
# 779 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( ItoF(_2) )
# 786 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 147 "parser.mly"
    ( App(_1, _2) )
# 794 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 150 "parser.mly"
    ( Tuple(_1) )
# 801 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 810 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( Put(_1, _4, _7) )
# 819 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 827 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 159 "parser.mly"
    ( Array(_2, _3) )
# 835 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
    ( failwith       (******* エラー出力 *******)
        (Printf.sprintf "%s line %d:%d-%d \x1b[31mParse Error:\x1b[0m"
           (Parsing.symbol_start_pos ()).pos_fname
           (Parsing.symbol_start_pos ()).pos_lnum
           ((Parsing.symbol_start_pos ()).pos_cnum -
           (Parsing.symbol_start_pos ()).pos_bol)
           ((Parsing.symbol_end_pos ()).pos_cnum -
           (Parsing.symbol_end_pos ()).pos_bol)
           (*   (Lexing.lexeme_end lexbuf)*)
        )
    )
# 851 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 175 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 860 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 179 "parser.mly"
    ( addtyp _1 :: _2 )
# 868 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 181 "parser.mly"
    ( [addtyp _1] )
# 875 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 186 "parser.mly"
    ( _1 @ [_2] )
# 883 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 189 "parser.mly"
    ( [_1] )
# 890 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 193 "parser.mly"
    ( _1 @ [_3] )
# 898 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 195 "parser.mly"
    ( [_1; _3] )
# 906 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 199 "parser.mly"
    ( _1 @ [addtyp _3] )
# 914 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 201 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 922 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
