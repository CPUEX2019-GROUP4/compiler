type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MUL4
  | DIV2
  | DIV10
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | LESS_DOT
  | GREATER_DOT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 46 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MUL4 *);
  264 (* DIV2 *);
  265 (* DIV10 *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* EQUAL *);
  271 (* LESS_GREATER *);
  272 (* LESS_EQUAL *);
  273 (* GREATER_EQUAL *);
  274 (* LESS *);
  275 (* GREATER *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  280 (* LET *);
  281 (* IN *);
  282 (* REC *);
  283 (* COMMA *);
  284 (* ARRAY_CREATE *);
  285 (* DOT *);
  286 (* LESS_MINUS *);
  287 (* SEMICOLON *);
  288 (* LPAREN *);
  289 (* RPAREN *);
    0 (* EOF *);
  290 (* LESS_DOT *);
  291 (* GREATER_DOT *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  279 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\007\000\
\007\000\004\000\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\002\000\003\000\003\000\003\000\003\000\006\000\005\000\002\000\
\001\000\008\000\007\000\003\000\003\000\001\000\004\000\002\000\
\001\000\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\038\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\013\000\014\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\047\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\054\000\049\000\017\000\056\000\082\000"

let yysindex = "\255\255\
\058\255\000\000\000\000\000\000\000\000\000\000\058\255\058\255\
\058\255\058\255\000\000\239\254\096\255\111\255\054\003\002\255\
\236\254\236\001\236\001\236\001\140\255\252\254\250\254\253\254\
\072\255\000\000\171\255\058\255\058\255\000\000\000\000\000\000\
\058\255\058\255\058\255\058\255\058\255\058\255\058\255\058\255\
\058\255\058\255\058\255\058\255\058\255\058\255\245\254\249\254\
\096\255\058\255\058\255\058\255\000\255\255\254\003\255\231\254\
\251\254\249\254\000\000\153\002\153\002\153\002\153\002\236\001\
\236\001\131\003\131\003\131\003\131\003\131\003\131\003\116\003\
\054\003\054\003\054\003\058\255\249\254\116\003\202\255\186\002\
\000\255\012\255\058\255\006\255\028\255\021\255\058\255\217\002\
\058\255\058\255\000\000\058\255\054\003\000\000\000\000\058\255\
\248\002\023\255\085\003\054\003\054\003\023\003\000\000\058\255\
\058\255\085\003\054\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\102\000\
\195\000\226\000\250\000\025\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\000\000\000\122\001\153\001\184\001\215\001\056\001\
\091\001\235\001\002\002\022\002\045\002\065\002\085\002\092\002\
\200\000\121\002\134\002\000\000\071\000\099\002\000\000\000\000\
\050\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\148\002\000\000\000\000\000\000\
\000\000\001\000\114\002\150\002\040\255\000\000\000\000\000\000\
\000\000\119\002\157\002"

let yygindex = "\000\000\
\004\000\003\000\000\000\000\000\000\000\000\000\241\255"

let yytablesize = 1190
let yytable = "\001\000\
\007\000\085\000\004\000\005\000\006\000\022\000\050\000\086\000\
\023\000\052\000\018\000\019\000\020\000\021\000\024\000\025\000\
\053\000\027\000\048\000\055\000\076\000\057\000\081\000\083\000\
\011\000\092\000\087\000\058\000\094\000\084\000\047\000\060\000\
\061\000\014\000\096\000\043\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\095\000\077\000\104\000\078\000\079\000\080\000\
\048\000\003\000\004\000\005\000\006\000\007\000\008\000\041\000\
\039\000\091\000\000\000\009\000\000\000\000\000\042\000\000\000\
\004\000\005\000\006\000\000\000\000\000\010\000\000\000\088\000\
\011\000\012\000\000\000\000\000\000\000\013\000\093\000\000\000\
\000\000\014\000\097\000\000\000\099\000\100\000\011\000\101\000\
\004\000\005\000\006\000\102\000\057\000\008\000\000\000\014\000\
\000\000\000\000\000\000\106\000\107\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\000\000\011\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\010\000\000\000\032\000\011\000\012\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\014\000\026\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\000\000\
\051\000\000\000\000\000\037\000\000\000\000\000\043\000\000\000\
\000\000\000\000\044\000\000\000\000\000\045\000\046\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\043\000\000\000\036\000\
\000\000\044\000\000\000\059\000\045\000\046\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\089\000\
\000\000\009\000\000\000\000\000\043\000\000\000\000\000\000\000\
\044\000\000\000\000\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\025\000\007\000\000\000\007\000\000\000\007\000\000\000\007\000\
\007\000\007\000\007\000\007\000\043\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\028\000\
\043\000\043\000\043\000\000\000\043\000\000\000\043\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\029\000\042\000\042\000\042\000\000\000\042\000\
\000\000\042\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\012\000\008\000\008\000\000\000\000\000\008\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\011\000\032\000\032\000\000\000\000\000\032\000\000\000\032\000\
\000\000\000\000\000\000\032\000\000\000\032\000\032\000\032\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\027\000\
\037\000\037\000\000\000\000\000\037\000\000\000\037\000\000\000\
\000\000\000\000\037\000\000\000\037\000\037\000\037\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\026\000\033\000\
\033\000\000\000\000\000\033\000\036\000\036\000\000\000\000\000\
\036\000\033\000\000\000\033\000\033\000\033\000\009\000\009\000\
\036\000\000\000\016\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\009\000\009\000\
\000\000\000\000\009\000\000\000\009\000\000\000\010\000\010\000\
\009\000\017\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\010\000\
\000\000\000\000\010\000\000\000\010\000\022\000\000\000\000\000\
\010\000\000\000\010\000\000\000\000\000\025\000\025\000\000\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\023\000\025\000\025\000\000\000\
\000\000\025\000\000\000\025\000\000\000\000\000\000\000\025\000\
\000\000\025\000\000\000\000\000\028\000\028\000\000\000\000\000\
\018\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\028\000\028\000\000\000\000\000\
\028\000\000\000\028\000\000\000\019\000\000\000\028\000\000\000\
\028\000\000\000\000\000\045\000\000\000\000\000\000\000\029\000\
\029\000\000\000\044\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\000\000\029\000\
\029\000\024\000\000\000\029\000\000\000\029\000\035\000\000\000\
\020\000\029\000\000\000\029\000\000\000\000\000\012\000\012\000\
\000\000\000\000\000\000\012\000\012\000\021\000\000\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\
\000\000\000\000\012\000\031\000\012\000\030\000\000\000\000\000\
\012\000\000\000\012\000\000\000\034\000\011\000\011\000\000\000\
\000\000\000\000\011\000\011\000\000\000\000\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\000\000\
\000\000\011\000\000\000\011\000\000\000\000\000\000\000\011\000\
\000\000\011\000\000\000\000\000\027\000\027\000\000\000\000\000\
\000\000\027\000\027\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\027\000\000\000\027\000\000\000\000\000\000\000\027\000\000\000\
\027\000\000\000\000\000\026\000\026\000\000\000\000\000\000\000\
\026\000\026\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\000\000\026\000\026\000\000\000\000\000\026\000\
\000\000\026\000\030\000\031\000\032\000\026\000\000\000\026\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\016\000\000\000\045\000\046\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\
\017\000\000\000\017\000\022\000\022\000\022\000\022\000\022\000\
\022\000\000\000\022\000\022\000\000\000\000\000\022\000\000\000\
\022\000\000\000\000\000\000\000\022\000\000\000\022\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\023\000\000\000\023\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\018\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\000\000\018\000\
\000\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
\000\000\019\000\019\000\000\000\000\000\019\000\000\000\019\000\
\045\000\045\000\000\000\019\000\045\000\019\000\045\000\044\000\
\044\000\000\000\045\000\044\000\045\000\044\000\000\000\000\000\
\000\000\044\000\000\000\044\000\000\000\000\000\024\000\024\000\
\000\000\000\000\024\000\035\000\035\000\020\000\020\000\035\000\
\024\000\020\000\024\000\000\000\000\000\035\000\000\000\035\000\
\000\000\020\000\021\000\021\000\000\000\000\000\021\000\030\000\
\031\000\032\000\000\000\000\000\035\000\036\000\021\000\000\000\
\031\000\031\000\030\000\030\000\031\000\000\000\030\000\000\000\
\000\000\034\000\034\000\000\000\031\000\034\000\030\000\000\000\
\000\000\000\000\045\000\046\000\000\000\034\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\000\000\
\000\000\000\000\090\000\000\000\043\000\000\000\000\000\000\000\
\044\000\000\000\000\000\045\000\046\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\044\000\
\000\000\098\000\045\000\046\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\044\000\000\000\
\103\000\045\000\046\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\000\000\000\000\000\000\000\000\000\000\105\000\
\000\000\043\000\000\000\000\000\000\000\044\000\000\000\000\000\
\045\000\046\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\044\000\000\000\000\000\045\000\
\046\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\046\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\000\000\000\000\000\000\000\000\000\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\046\000"

let yycheck = "\001\000\
\000\000\027\001\001\001\002\001\003\001\023\001\027\001\033\001\
\026\001\014\001\007\000\008\000\009\000\010\000\032\001\013\000\
\023\001\014\000\016\000\023\001\032\001\029\001\023\001\025\001\
\023\001\014\001\032\001\025\000\023\001\027\001\029\001\028\000\
\029\000\032\001\014\001\000\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\023\001\049\000\030\001\050\000\051\000\052\000\
\000\000\000\001\001\001\002\001\003\001\004\001\005\001\014\001\
\025\001\081\000\255\255\010\001\255\255\255\255\000\000\255\255\
\001\001\002\001\003\001\255\255\255\255\020\001\255\255\076\000\
\023\001\024\001\255\255\255\255\255\255\028\001\083\000\255\255\
\255\255\032\001\087\000\255\255\089\000\090\000\023\001\092\000\
\001\001\002\001\003\001\096\000\029\001\000\000\255\255\032\001\
\255\255\255\255\255\255\104\000\105\000\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\023\001\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\020\001\255\255\000\000\023\001\024\001\255\255\
\255\255\255\255\028\001\255\255\255\255\255\255\032\001\033\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\000\000\255\255\255\255\027\001\255\255\
\255\255\255\255\031\001\255\255\255\255\034\001\035\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\027\001\255\255\000\000\
\255\255\031\001\255\255\033\001\034\001\035\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\255\255\000\000\255\255\255\255\027\001\255\255\255\255\255\255\
\031\001\255\255\255\255\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\000\000\025\001\255\255\027\001\255\255\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\021\001\022\001\023\001\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\000\000\021\001\022\001\023\001\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\021\001\022\001\255\255\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\021\001\
\022\001\255\255\255\255\025\001\021\001\022\001\255\255\255\255\
\025\001\031\001\255\255\033\001\034\001\035\001\005\001\006\001\
\033\001\255\255\000\000\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\255\255\005\001\006\001\
\031\001\000\000\033\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\000\000\255\255\255\255\
\031\001\255\255\033\001\255\255\255\255\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\033\001\255\255\255\255\005\001\006\001\255\255\255\255\
\000\000\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\255\255\
\025\001\255\255\027\001\255\255\000\000\255\255\031\001\255\255\
\033\001\255\255\255\255\000\000\255\255\255\255\255\255\005\001\
\006\001\255\255\000\000\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\000\000\255\255\025\001\255\255\027\001\000\000\255\255\
\000\000\031\001\255\255\033\001\255\255\255\255\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\000\000\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\000\000\027\001\000\000\255\255\255\255\
\031\001\255\255\033\001\255\255\000\000\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\033\001\255\255\255\255\005\001\006\001\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\255\255\
\025\001\255\255\027\001\255\255\255\255\255\255\031\001\255\255\
\033\001\255\255\255\255\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\255\255\025\001\
\255\255\027\001\007\001\008\001\009\001\031\001\255\255\033\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\031\001\255\255\033\001\255\255\034\001\035\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\031\001\255\255\033\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\031\001\255\255\033\001\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\031\001\255\255\033\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\033\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\021\001\022\001\255\255\031\001\025\001\033\001\027\001\021\001\
\022\001\255\255\031\001\025\001\033\001\027\001\255\255\255\255\
\255\255\031\001\255\255\033\001\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\021\001\022\001\021\001\022\001\025\001\
\031\001\025\001\033\001\255\255\255\255\031\001\255\255\033\001\
\255\255\033\001\021\001\022\001\255\255\255\255\025\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\033\001\255\255\
\021\001\022\001\021\001\022\001\025\001\255\255\025\001\255\255\
\255\255\021\001\022\001\255\255\033\001\025\001\033\001\255\255\
\255\255\255\255\034\001\035\001\255\255\033\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\031\001\255\255\255\255\034\001\035\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\031\001\255\255\
\033\001\034\001\035\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\031\001\255\255\255\255\
\034\001\035\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\255\255\255\255\255\255\031\001\255\255\255\255\034\001\
\035\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\035\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL4\000\
  DIV2\000\
  DIV10\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  LESS_DOT\000\
  GREATER_DOT\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 69 "parser.mly"
    ( _2 )
# 511 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
    ( Unit )
# 517 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 73 "parser.mly"
    ( Bool(_1) )
# 524 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "parser.mly"
    ( Int(_1) )
# 531 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 77 "parser.mly"
    ( Float(_1) )
# 538 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 79 "parser.mly"
    ( Var(_1) )
# 545 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 81 "parser.mly"
    ( Get(_1, _4) )
# 553 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 85 "parser.mly"
    ( _1 )
# 560 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
    ( Not(_2) )
# 567 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 91 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 576 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 95 "parser.mly"
    ( Add(_1, _3) )
# 584 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( Sub(_1, _3) )
# 592 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( Mul4 _1 )
# 599 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 101 "parser.mly"
    ( Div2 _1 )
# 606 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( Div10 _1 )
# 613 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( Eq(_1, _3) )
# 621 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 629 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( Not(LE(_3, _1)) )
# 637 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( Not(LE(_1, _3)) )
# 645 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
    ( FLt(_1, _3) )
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
    ( Not(FLt(_1, _3)) )
# 661 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( LE(_1, _3) )
# 669 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( LE(_3, _1) )
# 677 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
    ( If(_2, _4, _6) )
# 686 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( FNeg(_2) )
# 693 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( FAdd(_1, _3) )
# 701 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( FSub(_1, _3) )
# 709 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    ( FMul(_1, _3) )
# 717 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( FDiv(_1, _3) )
# 725 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 136 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 734 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 139 "parser.mly"
    ( LetRec(_3, _5) )
# 742 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 142 "parser.mly"
    ( App(_1, _2) )
# 750 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 145 "parser.mly"
    ( Tuple(_1) )
# 757 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 147 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 766 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 149 "parser.mly"
    ( Put(_1, _4, _7) )
# 775 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 783 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 154 "parser.mly"
    ( Array(_2, _3) )
# 791 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
    ( failwith       (******* エラー出力 *******)
        (Printf.sprintf "%s line %d:%d-%d \x1b[31mParse Error:\x1b[0m"
           (Parsing.symbol_start_pos ()).pos_fname
           (Parsing.symbol_start_pos ()).pos_lnum
           ((Parsing.symbol_start_pos ()).pos_cnum -
           (Parsing.symbol_start_pos ()).pos_bol)
           ((Parsing.symbol_end_pos ()).pos_cnum -
           (Parsing.symbol_end_pos ()).pos_bol)
           (*   (Lexing.lexeme_end lexbuf)*)
        )
    )
# 807 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 170 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 816 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 174 "parser.mly"
    ( addtyp _1 :: _2 )
# 824 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 176 "parser.mly"
    ( [addtyp _1] )
# 831 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 181 "parser.mly"
    ( _1 @ [_2] )
# 839 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
    ( [_1] )
# 846 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 188 "parser.mly"
    ( _1 @ [_3] )
# 854 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 190 "parser.mly"
    ( [_1; _3] )
# 862 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 194 "parser.mly"
    ( _1 @ [addtyp _3] )
# 870 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 196 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 878 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
